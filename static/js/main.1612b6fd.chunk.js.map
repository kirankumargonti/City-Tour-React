{"version":3,"sources":["Components/Navbar/Navbar.jsx","Components/Tours/TourData.jsx","Components/TourList/TourList.jsx","Components/Tours/Tour.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Component","tourData","id","img","City","location","Info","TourList","props","renderContent","setState","showInfo","state","this","tour","removeTour","src","alt","onClick","Tour","sortedTours","toursDataInfo","filter","map","tourInfo","key","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TA0BeA,G,uLArBX,OACE,6BACE,yBAAKC,UAAU,aACb,0CAEF,4BACE,4BACE,uBAAGC,KAAK,KAAR,SAEF,4BACE,uBAAGA,KAAK,KAAR,UAEF,4BACE,uBAAGA,KAAK,IAAID,UAAU,aAAtB,gB,GAfSE,cCqDNC,G,MAxDE,CACf,CACEC,GAAI,EACJC,IACE,yGACFC,KAAM,SACNC,SAAU,gBACVC,KACE,kFAEJ,CACEJ,GAAI,EACJC,IACE,yGACFC,KAAM,QACNC,SAAU,mBACVC,KACE,kFAEJ,CACEJ,GAAI,EACJC,IACE,2GACFC,KAAM,QACNC,SAAU,eACVC,KACE,kFAEJ,CACEJ,GAAI,EACJC,IACE,2GACFC,KAAM,MACNC,SAAU,aACVC,KACE,kFAEJ,CACEJ,GAAI,EACJC,IACE,2GACFC,KAAM,QACNC,SAAU,iBACVC,KACE,kFAEJ,CACEJ,GAAI,EACJC,IACE,yGACFC,KAAM,SACNC,SAAU,6BACVC,KACE,oFCKSC,G,kBAtDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,cAAgB,WACd,EAAKC,SAAS,CACZC,UAAW,EAAKC,MAAMD,YANxB,EAAKC,MAAQ,CACXD,UAAU,GAJK,E,sEAaT,IAAD,EACmCE,KAAKL,MAAMM,KAA7CZ,EADD,EACCA,GAAIC,EADL,EACKA,IAAKC,EADV,EACUA,KAAMC,EADhB,EACgBA,SAAUC,EAD1B,EAC0BA,KACzBS,EAAeF,KAAKL,MAApBO,WACR,OACE,yBAAKjB,UAAU,qBACb,yBAAKA,UAAU,aAEb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKkB,IAAKb,EAAKc,IAAI,KACnB,8BACE,uBACEnB,UAAU,sBACVoB,QAAS,WACPH,EAAWb,QAKnB,yBAAKJ,UAAU,aACb,gCAAMM,EAAN,KACA,gCAAMC,EAAN,KACA,0CAEE,8BACE,uBACEP,UAAU,2BACVoB,QAASL,KAAKJ,kBAInBI,KAAKD,MAAMD,UAAY,uBAAGb,UAAU,QAAQQ,W,GA7CpCN,cC6BRmB,E,YA1Bb,WAAYX,GAAQ,IAAD,8BACjB,4CAAMA,KAMRO,WAAa,SAAAb,GACX,IAAMkB,EAAc,EAAKR,MAAMS,cAAcC,QAAO,SAAAR,GAAI,OAAIA,EAAKZ,KAAOA,KACxE,EAAKQ,SAAS,CACZW,cAAeD,KAPjB,EAAKR,MAAQ,CACXS,cAAepB,GAJA,E,sEAcT,IAAD,OACCoB,EAAkBR,KAAKD,MAAvBS,cACR,OACE,6BAASvB,UAAU,gBAChBuB,EAAcE,KAAI,SAAAC,GACjB,OAAO,kBAAC,EAAD,CAAUC,IAAKD,EAAStB,GAAIY,KAAMU,EAAUT,WAAY,EAAKA,qB,GApB3Df,aCSJ0B,MATf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGc6B,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1612b6fd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Navbar.css'\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <div className=\"Nav-Brand\">\r\n          <h1>City Tour</h1>\r\n        </div>\r\n        <ul>\r\n          <li>\r\n            <a href=\"/\">Home</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/\">About</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"/\" className=\"is-active\">Tours</a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","const tourData = [\r\n  {\r\n    id: 1,\r\n    img:\r\n      'https://images.pexels.com/photos/373893/pexels-photo-373893.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500',\r\n    City: 'London',\r\n    location: 'Sidney Bridge',\r\n    Info:\r\n      'Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti, recusandae!'\r\n  },\r\n  {\r\n    id: 2,\r\n    img:\r\n      'https://images.pexels.com/photos/258447/pexels-photo-258447.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500',\r\n    City: 'india',\r\n    location: 'Incredible place',\r\n    Info:\r\n      'Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti, recusandae!'\r\n  },\r\n  {\r\n    id: 3,\r\n    img:\r\n      'https://images.pexels.com/photos/1209978/pexels-photo-1209978.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500',\r\n    City: 'Paris',\r\n    location: 'Paris Bridge',\r\n    Info:\r\n      'Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti, recusandae!'\r\n  },\r\n  {\r\n    id: 4,\r\n    img:\r\n      'https://images.pexels.com/photos/1306699/pexels-photo-1306699.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500',\r\n    City: 'USA',\r\n    location: 'California',\r\n    Info:\r\n      'Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti, recusandae!'\r\n  },\r\n  {\r\n    id: 5,\r\n    img:\r\n      'https://images.pexels.com/photos/1292843/pexels-photo-1292843.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500',\r\n    City: 'India',\r\n    location: 'Hyderabad City',\r\n    Info:\r\n      'Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti, recusandae!'\r\n  },\r\n  {\r\n    id: 6,\r\n    img:\r\n      'https://images.pexels.com/photos/374870/pexels-photo-374870.jpeg?auto=compress&cs=tinysrgb&dpr=2&w=500',\r\n    City: 'Mumbai',\r\n    location: 'Mumbai Future Illustration',\r\n    Info:\r\n      'Lorem ipsum dolor sit amet consectetur adipisicing elit. Deleniti, recusandae!'\r\n  },\r\n];\r\nexport default tourData;\r\n","import React, { Component } from 'react';\r\nimport './TourList.css';\r\n\r\nclass TourList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showInfo: false\r\n    };\r\n  }\r\n  renderContent = () => {\r\n    this.setState({\r\n      showInfo: !this.state.showInfo\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { id, img, City, location, Info } = this.props.tour;\r\n    const { removeTour } = this.props;\r\n    return (\r\n      <div className=\"Tour-List-Section\">\r\n        <div className=\"tour-grid\">\r\n          {/* =====================First ToutList========================== */}\r\n          <div className=\"tour\">\r\n            <div className=\"img-container\">\r\n              <img src={img} alt=\"\" />\r\n              <span>\r\n                <i\r\n                  className=\"far fa-window-close\"\r\n                  onClick={() => {\r\n                    removeTour(id);\r\n                  }}\r\n                ></i>\r\n              </span>\r\n            </div>\r\n            <div className=\"tour-body\">\r\n              <h2> {City} </h2>\r\n              <h3> {location} </h3>\r\n              <h4>\r\n                Information\r\n                <span>\r\n                  <i\r\n                    className=\"far fa-caret-square-down\"\r\n                    onClick={this.renderContent}\r\n                  ></i>\r\n                </span>\r\n              </h4>\r\n              {this.state.showInfo && <p className=\"info\">{Info}</p>}\r\n            </div>\r\n          </div>\r\n          {/* =====================First ToutList========================== */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TourList;\r\n","import React, { Component } from 'react';\r\nimport './Tour.css';\r\nimport tourData from './TourData';\r\nimport TourList from '../TourList/TourList';\r\n\r\nclass Tour extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      toursDataInfo: tourData\r\n    };\r\n  }\r\n  removeTour = id => {\r\n    const sortedTours = this.state.toursDataInfo.filter(tour => tour.id !== id);\r\n    this.setState({\r\n      toursDataInfo: sortedTours\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { toursDataInfo } = this.state;\r\n    return (\r\n      <section className=\"tour-section\">\r\n        {toursDataInfo.map(tourInfo => {\r\n          return <TourList key={tourInfo.id} tour={tourInfo} removeTour={this.removeTour} />;\r\n        })}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tour;\r\n","import React from 'react';\nimport './App.css'\nimport Navbar from './Components/Navbar/Navbar';\nimport Tour from './Components/Tours/Tour';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Tour />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}